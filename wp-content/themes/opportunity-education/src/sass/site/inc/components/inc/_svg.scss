// ================================================= /
// ======   SVG COMPONENT  ========================= /
// ================================================= /

.c-svg {
	$block: &;

	width: 100%;
	position: relative;

	@at-root {

		// Inner is relative and full width
		&__inner {
			position: relative;
		}

		// SVG is positioned absolutely
		&__svg {
			display: block;
			position: absolute;
			bottom: 0;
			left: 0;
			width: 100%;
			height: 100%;
		}

		&__component {
			@include transition((fill, stroke, opacity, transform), std);

			// Stroked SVGs
			&--stroke {
				stroke: currentColor;
				stroke-width: 3;
				stroke-linecap: round;
				stroke-linejoin: round;
				vector-effect: non-scaling-stroke;
			}

			// Strokes of different colors
			&--stroke {

				// In color map
				@each $color, $value in $color-map {
					&-color-#{$color} {
						stroke: PSJ_color($color);
					}
				}

				// Translucent over different backgrounds
				&-color-translucent-light {
					stroke: rgba(PSJ_color(rich-white), 0.125);
				}
				&-color-translucent-dark {
					stroke: rgba(PSJ_color(victoria), 0.125);
				}

				&:not([class^='c-svg--fill-']) {
					fill: none;
				}
			}

			// Fills of different colors
			&--fill {

				@each $color, $value in $color-map {
					&-color-#{$color} {
						fill: PSJ_color($color);
					}
				}

				// Translucent over different backgrounds
				&-color-translucent-light {
					fill: rgba(PSJ_color(rich-white), 0.175);
				}
				&-color-translucent-dark {
					fill: rgba(PSJ_color(victoria), 0.125);
				}
			}

			// When these are transparent light children of a zesty background, make them a little brighter
			.u-background--zest :not([class*="u-background--"]) & {

				&--stroke-color-translucent-light {
					stroke: rgba(PSJ_color(rich-white), 0.35);
				}

				&--fill-color-translucent-light {
					fill: rgba(PSJ_color(rich-white), 0.35);
				}
			}
		}
	}
}

// Specific SVGs
.c-svg {
	$block: &;

	@at-root {

		// When stroked SVGs are inside of a background layer, thin out their strokes a touch
		.c-section__background-layer &__component--stroke {
			stroke-width: 1;
		}

		// When arrows are inside of captions, they are 1em tall and allow their inner to overflow
		.wp-caption-text &--right-facing-arrow,
		.wp-caption-text &--inverted-right-facing-arrow,
		.wp-caption-text &--left-facing-arrow, {
			pointer-events: none;
			display: none;
			width: 30px;
			height: 1em;
			margin-left: 0.5rem;

			// Inners are positioned absolutely here
			#{$block}__inner {
				position: absolute;
				left: 0;
				width: 100%;
			}

			@include PSJ_breakpoint(lg) {
				display: inline-block;
				width: 60px;
			}
			@include PSJ_breakpoint(xl) {
				width: 80px;
			}
		}

		// Regular arrows align to the bottom
		.wp-caption-text &--right-facing-arrow,
		.wp-caption-text &--left-facing-arrow {
			#{$block}__inner {
				top: auto;
				bottom: 0;
			}
		}

		// Inverted arrows inside captions align to the top
		.wp-caption-text &--inverted-right-facing-arrow {
			#{$block}__inner {
				top: 0;
				bottom: auto;
			}
		}
	}
}
